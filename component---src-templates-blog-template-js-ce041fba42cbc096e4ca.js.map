{"version":3,"sources":["webpack://gatsby-starter-stellar/./src/components/SEO.js","webpack://gatsby-starter-stellar/./src/templates/blogTemplate.js"],"names":["SEO","title","image","description","meta","keywords","site","useStaticQuery","metaTitle","siteMetadata","metaImage","siteUrl","metaDescription","excerpt","htmlAttributes","lang","titleTemplate","name","content","property","author","concat","length","join","defaultProps","blogTemplate","data","markdownRemark","frontmatter","html","id","className","date","dangerouslySetInnerHTML","__html"],"mappings":"uKAYA,SAASA,EAAT,GAA6D,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACtCC,GAASC,oBAAe,cAAxBD,KAeFE,EAAeP,EAAN,MAAiBK,EAAKG,aAAaR,MAC5CS,EAAYJ,EAAKG,aAAaE,SAAWT,GAAK,2BAC9CU,EAAkBT,GAAeG,EAAKG,aAAaI,QAEzD,OACE,gBAAC,IAAD,CACEC,eAAgB,CACdC,KAAK,MAEPd,MAAOA,EACPe,cAAeR,EACfJ,KAAM,CACJ,CACEa,KAAK,cACLC,QAASN,GAEX,CAAEO,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,eACTD,QAASZ,EAAKG,aAAaR,OAE7B,CACEkB,SAAS,WACTD,QAASjB,GAEX,CACEkB,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASZ,EAAKG,aAAaW,QAE7B,CACEH,KAAK,gBACLC,QAASV,GAEX,CACES,KAAK,sBACLC,QAASN,IAGVS,OACChB,EAASiB,OAAS,EACd,CACEL,KAAK,WACLC,QAASb,EAASkB,KAAT,OAEX,IAELF,OAAOjB,KAKhBJ,EAAIwB,aAAe,CACjBpB,KAAM,GACNC,SAAU,IAWZ,O,gHCrGe,SAASoB,EAAT,GAEX,IAAD,IADDC,KAE4CC,eAApCC,EADP,EACOA,YAAaC,EADpB,EACoBA,KAAMhB,EAD1B,EAC0BA,QAC3B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEZ,MAAO2B,EAAY3B,MACnBE,YAAaU,IAEf,uBAAKiB,GAAG,QACN,2BAASA,GAAG,UAAUC,UAAU,QAC9B,0BAAKH,EAAY3B,OACjB,yBAAI2B,EAAYI,MAChB,uBAAKC,wBAAyB,CAAEC,OAAQL","file":"component---src-templates-blog-template-js-ce041fba42cbc096e4ca.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ title, image, description, meta, keywords }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            excerpt\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaTitle = `${title} | ${site.siteMetadata.title}`\n  const metaImage = site.siteMetadata.siteUrl + (image || `/icons/icon-192x192.png`)\n  const metaDescription = description || site.siteMetadata.excerpt\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: `ja`,\n      }}\n      title={title}\n      titleTemplate={metaTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        { property: `og:image`,\n          content: metaImage,\n        },\n        {\n          property: `og:site_name`,\n          content: site.siteMetadata.title,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: metaTitle,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n}\n\nexport default SEO\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from '../components/layout'\nimport SEO from '../components/SEO'\n\nexport default function blogTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { frontmatter, html, excerpt } = data.markdownRemark\n  return (\n    <Layout>\n      <SEO\n        title={frontmatter.title}\n        description={excerpt}\n      />\n      <div id=\"main\">\n        <section id=\"content\" className=\"main\">\n          <h1>{frontmatter.title}</h1>\n          <p>{frontmatter.date}</p>\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($id: String!) {\n    markdownRemark(id: {eq: $id}) {\n      html\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}